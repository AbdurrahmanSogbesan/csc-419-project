// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum ReservationStatus {
  RESERVED
  BORROWED
  RETURNED 
  OVERDUE
  CANCELLED
}

enum FineStatus {
  UNPAID
  PAID
}

enum TransactionType {
  BORROW
  RETURN
  FINE_PAYMENT
}

enum NotificationType {
  RESERVATION_AVAILABLE
  BOOK_DUE_SOON
  BOOK_OVERDUE
  FINE_ISSUED
  FINE_PAYMENT_REMINDER
  SYSTEM_ANNOUNCEMENT
  BOOK_PICKED_UP
  BOOK_RESERVED
  BOOK_RETURNED
}


model User {
  id        BigInt   @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String?  
  role      Role     @default(MEMBER)
  restrictedUntil DateTime? 
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  borrowedBooks BorrowedBook[]
  reservations  Reservation[]
  transactions  Transaction[]
  savedBooks    SavedBook[]
  fines         Fine[]
  notifications Notification[]
}

model Book {
  id              BigInt   @id @default(autoincrement())
  ISBN            String   @unique
  title           String
  author          String
  description     String?
  pages           Int?
  category        String[]   @default([])
  copiesAvailable Int      @default(0)
  copiesBorrowed  Int      @default(0) 
  publishedYear   Int
  imageUrl        String?
  language        String?
  borrowCount     Int      @default(0)
  createdAt       DateTime @default(now()) @db.Timestamptz(3)

  borrowedBooks BorrowedBook[]
  reservations  Reservation[]
  transactions  Transaction[]
  savedBooks  SavedBook[]
  fines           Fine[]
  notifications Notification[]
}

model BorrowedBook {
  id           BigInt     @id @default(autoincrement())
  uuid         String     @unique @default(uuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       BigInt
  book         Book       @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId       BigInt
  borrowDate   DateTime   @default(now()) @db.Timestamptz(3)
  dueDate      DateTime   @db.Timestamptz(3)
  returnDate   DateTime?  @db.Timestamptz(3)
  reservation  Reservation? @relation(fields: [reservationId], references: [id])
  reservationId BigInt?   @unique  
}

model SavedBook {
  id        BigInt  @id @default(autoincrement())
  uuid      String  @unique @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt
  book      Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    BigInt
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([userId, bookId]) 
}

model Reservation {
  id              BigInt            @id @default(autoincrement())
  uuid            String            @unique @default(uuid())
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          BigInt
  book            Book              @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId          BigInt
  reservationDate DateTime          @default(now()) @db.Timestamptz(3)
  reservedUntil   DateTime?         // Auto-revert if not borrowed in 7 days
  status          ReservationStatus @default(RESERVED)      
  notified        Boolean           @default(false) 
  borrowedBook    BorrowedBook?     // One-to-one relation with BorrowedBook
  notifications Notification[]
}


model Fine {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     BigInt
  book       Book?    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId     BigInt?
  amount     Float    // Fine amount
  status     FineStatus @default(UNPAID)
  createdAt  DateTime  @default(now()) @db.Timestamptz(3)
  paidAt     DateTime? // When the fine was paid
}

model Transaction {
  id         BigInt          @id @default(autoincrement())
  uuid       String          @unique @default(uuid())
  userId     BigInt
  bookId     BigInt?
  actionType TransactionType
  timestamp  DateTime        @default(now()) @db.Timestamptz(3)
  amount     Float?          // Used only for fine payments

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book? @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Notification {
  id          BigInt           @id @default(autoincrement())
  uuid        String           @unique @default(uuid())
  userId      BigInt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now()) @db.Timestamptz(3)
  readAt      DateTime?        @db.Timestamptz(3)
  bookId      BigInt?
  book        Book?            @relation(fields: [bookId], references: [id], onDelete: SetNull)
  reservationId BigInt?
  reservation  Reservation?    @relation(fields: [reservationId], references: [id], onDelete: SetNull)
}
